proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=the_zone:10m inactive=60m max_size=2g;

lua_package_path "/usr/local/openresty/lib/lua/?.lua;;";

server {
    listen 80;

    # Re-resolve s3.amazonaws.com so that we aren't always
    # using the same IP address.
    resolver 8.8.8.8 valid=60s;
    resolver_timeout 10s;

    location / {
        # Only allow GET and HEAD requests.
        limit_except GET HEAD {
            deny all;
        }

        # Access handler for injecting the headers necessary to
        # authorize requests with Amazon S3:
        #
        # - Authorization
        # - x-amz-date
        # - x-amz-content-sha256
        #
        set $aws_s3_endpoint '';
        access_by_lua_block {
            local AWSV4S = require "api-gateway.aws.AwsV4Signature"

            -- Default to us-east-1 when AWS_DEFAULT_REGION is not
            -- set.
            local aws_region = os.getenv("AWS_DEFAULT_REGION")
            if not aws_region then
                aws_region = "us-east-1"
            end

            -- Customize the S3 bucket
            local aws_s3_bucket = os.getenv("AWS_S3_BUCKET")
            if not aws_s3_bucket then
                ngx.var.aws_s3_endpoint = "s3.amazonaws.com"
            else
                ngx.var.aws_s3_endpoint = aws_s3_bucket .. ".s3.amazonaws.com"
            end

            -- Create a table with items the AwsV4Signature class uses
            -- as inputs to produce a valid signature.
            local aws_credentials = {
                aws_service = "s3",
                aws_region = aws_region,
                aws_access_key = os.getenv("AWS_ACCESS_KEY_ID"),
                aws_secret_key = os.getenv("AWS_SECRET_ACCESS_KEY"),
            }

            -- Extract the timestamp used to produce the signature,
            -- as well as the signature itself, and the payload checksum.
            local awsAuth = AWSV4S:new(aws_credentials)
            local authorization, payloadChecksum = awsAuth:getAuthorizationHeader(
                ngx.var.request_method,
                ngx.var.uri,
                ngx.req.get_uri_args(),
                ngx.var.request_body,
                ngx.var.aws_s3_endpoint
            )

            -- Set headers for the request being proxied to Amazon S3.
            ngx.req.set_header("Authorization", authorization)
            ngx.req.set_header("x-amz-date", awsAuth.aws_date)
            ngx.req.set_header("x-amz-content-sha256", payloadChecksum)
        }

        proxy_pass https://$aws_s3_endpoint;

        # Mimic request headers that are set and not set by original
        # SDK connections.
        proxy_set_header Connection '';
        proxy_set_header Accept-Encoding identity;

        # Make connection to S3 using HTTP/1.1
        proxy_http_version 1.1;

        # Disable automatic HEAD to GET conversion by Nginx for caching
        # purposes. Afterwards, tweak the cache key so that it includes
        # the request method (creates separate entries for HEAD and GET
        # requests for the same resource).
        proxy_cache_convert_head off;
        proxy_cache_key $request_method$proxy_host$request_uri;

        # Buffer responses from S3 until we have it all. Disabling this
        # feature makes it so that the response is passed through to the
        # client synchronously.
        proxy_buffering on;

        proxy_cache the_zone;
        proxy_cache_valid 200 24h;

        # Use X-Cached header to signal to clients when requests are
        # cache HITS vs cache MISSES.
        add_header X-Cached $upstream_cache_status;
    }
}
